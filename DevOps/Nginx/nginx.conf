
user www www;           # 定义Nginx运行的用户和用户组
worker_processes  1;    # nginx进程数，建议设置为等于CPU总核心数。

# 全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]
# error_log  logs/error.log;
# error_log  logs/error.log  notice;
# error_log  logs/error.log  info;

# pid        logs/nginx.pid;        # 进程pid文件

# 指定进程可以打开的最大描述符：数目
# 工作模式与连接数上限
# 这个指令是指当一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（ulimit -n）与nginx进程数相除，但是nginx分配请求并不是那么均匀，所以最好与ulimit -n 的值保持一致。
# 现在在linux 2.6内核下开启文件打开数为65535，worker_rlimit_nofile就相应应该填写65535。
# 这是因为nginx调度时分配请求到进程并不是那么的均衡，所以假如填写10240，总并发量达到3-4万时就有进程可能超过10240了，这时会返回502错误。
worker_rlimit_nofile 65535;

events {
    # use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; 
    # epoll模型是Linux 2.6以上版本内核中的高性能网络I/O模型，如果跑在FreeBSD上面，就用kqueue模型。
    # 参考事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; epoll模型
    # 是Linux 2.6以上版本内核中的高性能网络I/O模型，linux建议epoll，如果跑在FreeBSD上面，就用kqueue模型。
    # 补充说明：
    # 与apache相类，nginx针对不同的操作系统，有不同的事件模型
    # A）标准事件模型
    # Select、poll属于标准事件模型，如果当前系统不存在更有效的方法，nginx会选择select或poll
    # B）高效事件模型
    # Kqueue：使用于FreeBSD 4.1+, OpenBSD 2.9+, NetBSD 2.0 和 MacOS X.使用双处理器的MacOS X系统使用kqueue可能会造成内核崩溃。
    # Epoll：使用于Linux内核2.6版本及以后的系统。
    # /dev/poll：使用于Solaris 7 11/99+，HP/UX 11.22+ (eventport)，IRIX 6.5.15+ 和 Tru64 UNIX 5.1A+。
    # Eventport：使用于Solaris 10。 为了防止出现内核崩溃的问题， 有必要安装安全补丁。
    use epoll;

    # 每个进程可以处理的最大连接数，理论上每台nginx服务器的最大连接数为worker_processes*worker_connections。理论值：worker_rlimit_nofile/worker_processes
    # 注意：最大客户数也由系统的可用socket连接数限制（~ 64K），所以设置不切实际的高没什么好处
    worker_connections  1024;

    # worker工作方式：串行（一定程度降低负载，但服务器吞吐量大时，关闭使用并行方式）
    # multi_accept on; 
}


http {
    include       mime.types;                   # 文件扩展名与文件类型映射表
    default_type  application/octet-stream;     # 默认文件类型

    # log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    # access_log  logs/access.log  main;
    # access_log  off;                           # 关闭日志

    
    #charset utf-8;#默认编码
    server_names_hash_bucket_size 128;#服务器名字的hash表大小
    client_max_body_size 8m;#客户端请求单个文件的最大字节数
    client_header_buffer_size 32k;#指定来自客户端请求头的hearerbuffer大小
    large_client_header_buffers 4 64k;#指定客户端请求中较大的消息头的缓存最大数量和大小。
    sendfile on;#开启高效传输模式。
    tcp_nopush on;#防止网络阻塞
    tcp_nodelay on;    
    keepalive_timeout 60;#客户端连接超时时间，单位是秒
    client_header_timeout 10;#客户端请求头读取超时时间
    client_body_timeout 10;#设置客户端请求主体读取超时时间
    send_timeout 10;#响应客户端超时时间
    sendfile        on;
    # types_hash_max_size 2048;

    # FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。
    fastcgi_connect_timeout 300;
    fastcgi_send_timeout 300;
    fastcgi_read_timeout 300;
    fastcgi_buffer_size 64k;
    fastcgi_buffers 4 64k;
    fastcgi_busy_buffers_size 128k;
    fastcgi_temp_file_write_size 128k;

    # gzip压缩功能设置
    gzip on;                # 是否开启gzip压缩
    gzip_min_length 1k;     # 1k以下不压缩
    gzip_buffers 4 16k;     # 压缩缓冲区
    gzip_http_version 1.0;  # 压缩版本（默认1.1，前端如果是squid2.5请使用1.0）
    gzip_comp_level 6;      # 压缩等级 1-9 等级越高，压缩效果越好，节约宽带，但CPU消耗大
    # 压缩类型，默认就已经包含text/html，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。
    gzip_types text/html text/plain text/css text/javascript application/json application/javascript application/x-javascript application/xml;
    gzip_vary on;           # 前端缓存服务器缓存经过压缩的页面

    # http_proxy 设置
    client_max_body_size 10m;
    client_body_buffer_size 128k;
    proxy_connect_timeout 75;
    proxy_send_timeout 75;
    proxy_read_timeout 75;
    proxy_buffer_size 4k;
    proxy_buffers 4 32k;
    proxy_busy_buffers_size 64k;
    proxy_temp_file_write_size 64k;
    proxy_temp_path /usr/local/nginx/proxy_temp 1 2;

    # 设定负载均衡后台服务器列表
    upstream backend {
        # 调度算法
        # 1.轮循（默认）（weight轮循权值）
        # 2.ip_hash：根据每个请求访问IP的hash结果分配。（会话保持）
        # 3.fair:根据后端服务器响应时间最短请求。（upstream_fair模块）
        # 4.url_hash:根据访问的url的hash结果分配。（需hash软件包）
        # 参数：
        # down：表示不参与负载均衡
        # backup:备份服务器
        # max_fails:允许最大请求错误次数
        # fail_timeout:请求失败后暂停服务时间。
        #ip_hash;
        server 192.168.10.100:8080 max_fails=2 fail_timeout=30s ;
        server 192.168.10.101:8080 max_fails=2 fail_timeout=30s ;
    }

    server { # 一个server节点就是一个虚拟主机 可以通过配置多个server从而配置多个虚拟主机
        listen       80;        // 监听端口
        server_name  localhost; // 域名

        # charset koi8-r;

        # access_log  logs/host.access.log  main;

        # location / {
        #    root   html;
        #    index  index.html index.htm;
        # }
	    location / {
	   	    root   html;
	   	    index  index.html index.htm;
            try_files $uri $uri/ /index.html;

            # # Proxy_pass configuration
            # proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            # proxy_set_header Host $http_host;
            # proxy_set_header X-NginX-Proxy true;
            # proxy_set_header Upgrade $http_upgrade;
            # proxy_set_header Connection "upgrade";
            # proxy_max_temp_file_size 0;
            # proxy_pass http://test/;
            # proxy_redirect off;
            # proxy_read_timeout 240s;
            # proxy_http_version 1.1;
        }
        # error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        # location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        # }

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        # php脚本请求全部转发给FastCGI处理
        # location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        # }

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        # 禁止访问
        # location ~ /\.ht {
        #    deny  all;
        # }
    }

    server {
        listen 443;                                             # 监听端口
        server_name mp.hanxing.store;                           # 域名
        # server_name _; #不启用域名
        #charset koi8-r;                                        # 编码格式，若网页格式与此不同，将被自动转码
        #access_log  logs/host.access.log  main;                # 虚拟主机访问日志定义

        ssl on;
        root /home/www/xcxtp5/public;                           # 改项目路径
        index index.html index.htm;
        ssl_certificate   cert/cert_mp.hanxing.store.crt;       # 证书路径
        ssl_certificate_key  cert/cert_mp.hanxing.store.key;    # 私钥路径
        ssl_session_timeout 5m;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_prefer_server_ciphers on;

        # location匹配语法规则  location [=|~|~*|^~] /uri/ { … }
        # 当有匹配成功时候，停止匹配，按当前匹配规则处理请求。匹配优先级从上至下

        # = 开头表示精确匹配
        # ^~ 开头表示uri以某个常规字符串开头，理解为匹配 url路径即可。nginx不对url做编码，因此请求为/static/20%/aa，可以被规则^~ /static/ /aa匹配到（注意是空格）。以xx开头
        # ~ 开头表示区分大小写的正则匹配                     以xx结尾
        # ~* 开头表示不区分大小写的正则匹配                以xx结尾
        # !~和!~*分别为区分大小写不匹配及不区分大小写不匹配 的正则
        # / 通用匹配，任何请求都会匹配到。

        location = / {          # 规则A     
            # http://localhost/         匹配
            
        }
        location = /login {     # 规则B
            # http://localhost/login    匹配
        }
        location ^~ /static/ {  # 规则C
            # http://localhost/static/a.html 
            # http://localhost/static/c.png 也匹配到E 但C更优先
        }
        location ~ \.(gif|jpg|png|js|css)$ { # 规则D，注意：是根据括号内的大小写进行匹配。括号内全是小写，只匹配小写
            # http://localhost/a.gif
            # http://localhost/b.jpg
        }
        location ~* \.png$ {    # 规则E
            # http://localhost/a.PNG    不区分大小写 匹配到E 不匹配到D
        }
        location !~ \.xhtml$ {  # 规则F
            # http://localhost/a.xhtml  不会匹配
        }
        location !~* \.xhtml$ { # 规则G
            # http://localhost/a.xhtml  不会匹配
            # http://localhost/a.XHTML  不会匹配
        }
        location / {            # 规则H
            # http://localhost/register 匹配
            # http://localhost/category/id/1111
        }


        location / {
            root   /public/sell/app/dist;           # 访问路径，可相对也可绝对路径
            index  index.php index.html index.htm;  # 首页文件。以下按顺序匹配
            autoindex  on;              # 默认off  不列出整个目录
            autoindex_exact_size off;   # 默认为on  显示出文件的确切大小，单位是bytes。改为off后，显示出文件的大概大小，单位是kB或者MB或者GB
            autoindex_localtime on;     # 默认为off 显示的文件时间为GMT时间。改为on后，显示的文件时间为文件的服务器时间

            # 对 / 所有做负载均衡+反向代理
            proxy_pass http://localhost:8080;  # 负载均衡调用
            proxy_set_header Host $host:$server_port;    //思路：通过/，将所有的请求，转发给第3方处理
            # 后端的Web服务器可以通过X-Forwarded-For获取用户真实IP
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
            proxy_redirect off;

            # 限制IP访问
            deny 192.168.0.2；
            allow 192.168.0.0/24;
            allow 192.168.1.1;
            deny all;

            # 伪静态配置
            if (!-e $request_filename) {
                rewrite  ^(.*)$  /index.php?s=$1  last;
                break;
            }
        }
        location /sell {
            proxy_set_header   X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header   Host      $http_host;
            proxy_set_header X-NginX-Proxy true;
            proxy_pass         http://127.0.0.1:8080;
            proxy_redirect off;
        }

        # 所有静态请求都由nginx处理，存放目录为html  
        location ~ .(gif|jpg|jpeg|png|bmp|swf|css|js)$ {
            root    e:wwwroot;  
        }

        # 所有动态请求都转发给tomcat处理  
        location ~ .(jsp|do)$ {
            proxy_pass  http://test;
        }

        # 防盗链
        location ~* \.(gif|jpg|png|bmp)$ {
            valid_referers none blocked *.ttlsa.com server_names ~\.google\. ~\.baidu\.; # 自己网站或百度谷歌访问返回false
            if ($invalid_referer) {
                return 403; # 不是自己的网站 响应403
                #rewrite ^/ http://www.ttlsa.com/403.jpg;
            }
        }

        # 设置扩展名以.jsp、.php、.jspx结尾的动态应用程序不做缓存
        location ~.*\.(jsp|php|jspx)?$ { 
            proxy_set_header Host $host; 
            proxy_set_header X-Real-IP $remote_addr; 
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;   
            proxy_pass http://IP;
        }

        # 重定向
        if ($http_host !~ "^star\.igrow\.cn$" {
            rewrite ^(.*) http://star.igrow.cn$1 redirect;
        }

        # 根据不同的浏览器URL重写
        if($http_user_agent ~ Firefox){
            rewrite ^(.*)$  /firefox/$1 break; 
        }
        if($http_user_agent ~ MSIE){
            rewrite ^(.*)$  /msie/$1 break; 
        }
        
        # 实现域名跳转
        location / {
            rewrite ^/(.*)$ https://web8.example.com$1 permanent;
        }

        error_page 404 /404.html;
            location = /40x.html {
        }
        error_page 500 502 503 504 /50x.html;
            location = /50x.html {
        }
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    # server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    # }

    # HTTPS server
    #
    # server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    # }

}
