#、Main Porcelain Commands
#############################################################################################
    #、init  
        git init                            // 创建版本库 (生成例：/.git/目录)         
    #、clone          
        git clone <adderss>                 // 克隆一个已有的远程仓库。address是远程库地址
        git clone <adderss>  --depth==1     // 只clone最后一次commit的内容


    #、add  
        git add <file>                      // 用于把文件添加到git（暂存区），准备提交
        git add -A  或者 git add -all       // 把工作区的所有修改添加到暂存区
        git add .                           // 提交所有文件到暂存区
        git add -i  (--interactive)         // 交互式终端模式          
    #、mv             
    #、restore        
    #、rm
        git rm --cached <file>              // 从暂存区撤回commit内容:(会删除文件已commit文件)
        git rm <file>                       // 删除文件。删除之后还需要提交（git commit）
        
    #、sparse-checkout



    #、bisect         
    #、diff           
    #、grep           
    #、log 
        git log                                               // 由近及远返回commit历史记录(提交日志)
        git log --pretty=online(单行显示---长hash)             // 查看版本历史记录-简化输出日志
        git log --online(单行显示---短hash)                    // 查看版本历史记录  
        git log --graph                                       // 显示分支合并图
        git log -p -2			                                    // -p:显示每次提交的内容差异。-2:仅显示最近两次提交：
           
    #、shortlog       
    #、show 
        git log [<选项>] [<版本范围>] [[--] <路径>...]
        git show [<选项>] <对象>...
            -q, --quiet           不显示差异输出
            --source              显示源
            --use-mailmap         使用邮件映射文件
            --decorate-refs <模式> 只修饰与 <模式> 匹配的引用
            --decorate-refs-exclude <模式> 不修饰和 <模式> 匹配的引用
            --decorate[=...]      修饰选项
            -L <n,m:file>         处理文件中第 n 到 m 之间的行，从 1 开始
          
    #、status         
        git status			检查当前文件状态
        git status -s
        git status --short 	状态简览



    #、branch    
        git branch                                            // 查看本地分支
        git branch -r                                         // 查看远程分支
        git branch -a                                         // 查看所有分支
        git branch branchname                                 // 新建分支
        git branch -d branchname                              // 删除分支
        git branch -D branchname                              // 强制删除  
        git branch -d -r branchname                           // 删除远程分支并推送
        git push origin:branchname                            // 删除分支后推送
        git branch -m oldbranchname newbranchname             // 重命名本地分支

        git branch [<选项>] [-r | -a] [--merged | --no-merged]
        git branch [<选项>] [-l] [-f] <分支名> [<起始点>]
        git branch [<选项>] [-r] (-d | -D) <分支名>...
        git branch [<选项>] (-m | -M) [<旧分支>] <新分支>
        git branch [<选项>] (-c | -C) [<老分支>] <新分支>
        git branch [<选项>] [-r | -a] [--points-at]
        git branch [<选项>] [-r | -a] [--format]     
    #、commit  
        git commit -m 'comment'             //把暂存区的所有内容提交到当前分支 只有添加文件之后才能使用，用于提交内容到主分支（默认是master）       
    #、merge      
        git merge branchname                // 合并branchname分支到当前分支
        git merge --no-ff <branch>          // 关闭Fast-forward 合并（快速模式），强制禁用快速合并模式进行合并指定分支到当前分支
        git merge --no-ff branchname        // 合并分支
        #合并分支
            1.在master分支操作一个文件1.txt(例如加入一段信息)    add commit      master分支上的操作
            2.创建并切换至另一分支a,操作该文件(再加入一段信息)    add commit      a分支上的操作
            3.切换至master分支 查看1.txt(无法显示a分支下的操作)
            3.git merge a//把a分支的工作成果合并到master分支上   Fast-forward:“快进模式”，也就是直接把master指向dev的当前提交，所以合并速度非常快。
            4.查看1.txt(可显示a分支下的操作)
    
    #、rebase         
    #、reset    
        git reset HEAD <file>               // 把暂存区的修改回退到工作区（把暂存区的修改撤销掉清除 （unstage），重新放回工作区）
        git reset --hard HEAD^              // 把当前版本回退到上一个版本
        git reset --hard commitId           // HEAD指针指向commitId版本    
        git reset --hard <commit_id>        //把工作区内容恢复到指定版本
        前进回退版本号:
            1.使用索引值
            git reset --hard 局部索引值
            2.使用^符号(只能后退)
            git reset --hard HEAD^ // 回退一步
            git reset --hard HEAD^^ // 回退二步
            git reset --hard HEAD^ // 回退三步
            3.使用~符号(只能后退)
            git reset --hard HEAD~n // 回退n步
            --soft    //在本地库移动HEAD指针
            --mixed   //在本地库移动HEAD指针/重置暂存区
            --hard    //在本地库移动HEAD指针/重置暂存区/重置工作区
      
    #、switch         
    #、tag            



    #、fetch 
        git fetch remotealias   // 拉取远程仓库到本地仓库 (默认master分支)
        git fetch remotealias branchname   // 拉取远程指定分支到本地仓库 (成功后返回一个FETCH_HEAD) // git log -p FETCH_HEAD         
    #、pull  
        git push -u origin branchname             // 第一次把本地库的所有内容推送到远程库上 (远程库的名字就是origin，这是Git默认的叫法)
        git push origin branchname                // 之后的提交
        git pull remotealias // 不确定是否拉取所有分支
        git pull remotealias remotebranch // 拉取远程分支并与本地分支合并(默认当前分支)
        git pull remotealias remotebranch:localbranch   //  相当于：
            1.git fetch remotealias remotebranch
            2.git merge localbranch         
    #、push           



    #、checkout   
        git checkout <branch>                                 // 切换到指定分支
        git checkout -b <newbranch>                           // 创建一个新的分支并切换到这个新的分支。-b参数表示创建新分支 newbranch 新的分支名
        git checkout branchname                               // 切换到某分支
        git checkout -- <file>                                // 丢弃工作区的修改
        git checkout -- <file>                                // 放弃在工作区的更改     //就是让这个文件回到最近一次git commit或git add时的状态 撤销文件的修改到最近一次git commit或者git add 注意：--非常重要 
        add前形成的修改(未再add):                             // 撤销修改就回到和版本库一模一样的状态
        add后形成的修改(未再add):                             // 撤销修改就回到添加到暂存区后的状态。    
    #、revert         
    #、stash          
    #、clean          
    #、notes          
    #、am             
    #、archive        
    #、bundle         
    #、cherry-pick    
    #、citool         
    #、describe       
    #、format-patch   
    #、gc             
    #、gitk           
    #、gui            
    #、range-diff     
    #、submodule      
    #、worktree       



#、Ancillary Commands / Manipulators
#############################################################################################
    config               Get and set repository or global options
    fast-export          Git data exporter
    fast-import          Backend for fast Git data importers
    filter-branch        Rewrite branches
    mergetool            Run merge conflict resolution tools to resolve merge conflicts
    pack-refs            Pack heads and tags for efficient repository access
    prune                Prune all unreachable objects from the object database
    reflog               Manage reflog information
    remote               Manage set of tracked repositories
    repack               Pack unpacked objects in a repository
    replace              Create, list, delete refs to replace objects



#、Ancillary Commands / Interrogators
#############################################################################################
    annotate             Annotate file lines with commit information
    blame                Show what revision and author last modified each line of a file
    bugreport            Collect information for user to file a bug report
    count-objects        Count unpacked number of objects and their disk consumption
    difftool             Show changes using common diff tools
    fsck                 Verifies the connectivity and validity of the objects in the database
    gitweb               Git web interface (web frontend to Git repositories)
    help                 Display help information about Git
    instaweb             Instantly browse your working repository in gitweb
    merge-tree           Show three-way merge without touching index
    rerere               Reuse recorded resolution of conflicted merges
    show-branch          Show branches and their commits
    verify-commit        Check the GPG signature of commits
    verify-tag           Check the GPG signature of tags
    whatchanged          Show logs with difference each commit introduces



#、Interacting with Others
#############################################################################################
    archimport           Import a GNU Arch repository into Git
    cvsexportcommit      Export a single commit to a CVS checkout
    cvsimport            Salvage your data out of another SCM people love to hate
    cvsserver            A CVS server emulator for Git
    imap-send            Send a collection of patches from stdin to an IMAP folder
    p4                   Import from and submit to Perforce repositories
    quiltimport          Applies a quilt patchset onto the current branch
    request-pull         Generates a summary of pending changes
    send-email           Send a collection of patches as emails
    svn                  Bidirectional operation between a Subversion repository and Git



#、Low-level Commands / Manipulators
#############################################################################################
    apply                Apply a patch to files and/or to the index
    checkout-index       Copy files from the index to the working tree
    commit-graph         Write and verify Git commit-graph files
    commit-tree          Create a new commit object
    hash-object          Compute object ID and optionally creates a blob from a file
    index-pack           Build pack index file for an existing packed archive
    merge-file           Run a three-way file merge
    merge-index          Run a merge for files needing merging
    mktag                Creates a tag object
    mktree               Build a tree-object from ls-tree formatted text
    multi-pack-index     Write and verify multi-pack-indexes
    pack-objects         Create a packed archive of objects
    prune-packed         Remove extra objects that are already in pack files
    read-tree            Reads tree information into the index
    symbolic-ref         Read, modify and delete symbolic refs
    unpack-objects       Unpack objects from a packed archive
    update-index         Register file contents in the working tree to the index
    update-ref           Update the object name stored in a ref safely
    write-tree           Create a tree object from the current index



#、Low-level Commands / Interrogators
#############################################################################################
    cat-file             Provide content or type and size information for repository objects
    cherry               Find commits yet to be applied to upstream
    diff-files           Compares files in the working tree and the index
    diff-index           Compare a tree to the working tree or index
    diff-tree            Compares the content and mode of blobs found via two tree objects
    for-each-ref         Output information on each ref
    get-tar-commit-id    Extract commit ID from an archive created using git-archive
    ls-files             Show information about files in the index and the working tree
    ls-remote            List references in a remote repository
    ls-tree              List the contents of a tree object
    merge-base           Find as good common ancestors as possible for a merge
    name-rev             Find symbolic names for given revs
    pack-redundant       Find redundant pack files
    rev-list             Lists commit objects in reverse chronological order
    rev-parse            Pick out and massage parameters
    show-index           Show packed archive index
    show-ref             List references in a local repository
    unpack-file          Creates a temporary file with a blob's contents
    var                  Show a Git logical variable
    verify-pack          Validate packed Git archive files



#、Low-level Commands / Syncing Repositories
#############################################################################################
    daemon               A really simple server for Git repositories
    fetch-pack           Receive missing objects from another repository
    http-backend         Server side implementation of Git over HTTP
    send-pack            Push objects over Git protocol to another repository
    update-server-info   Update auxiliary info file to help dumb servers



#、Low-level Commands / Internal Helpers
#############################################################################################
    check-attr           Display gitattributes information
    check-ignore         Debug gitignore / exclude files
    check-mailmap        Show canonical names and email addresses of contacts
    check-ref-format     Ensures that a reference name is well formed
    column               Display data in columns
    credential           Retrieve and store user credentials
    credential-store     Helper to store credentials on disk
    fmt-merge-msg        Produce a merge commit message
    interpret-trailers   Add or parse structured information in commit messages
    mailinfo             Extracts patch and authorship from a single e-mail message
    mailsplit            Simple UNIX mbox splitter program
    merge-one-file       The standard helper program to use with git-merge-index
    patch-id             Compute unique ID for a patch
    sh-i18n              Git's i18n setup code for shell scripts
    sh-setup             Common Git shell script setup code
    stripspace           Remove unnecessary whitespace



#、External commands
#############################################################################################
    askyesno
    credential-helper-selector
    flow
    lfs