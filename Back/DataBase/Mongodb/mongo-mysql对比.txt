===================================================================================================
                MongoDB             MySQL
插入稳定性           低                高
插入速度        MongoDB不指定_id插入 > MySQL不指定主键插入 > MySQL指定主键插入 > MongoDB指定_id插入。
数据结构             弱                强




MongoDB在指定_id与不指定_id插入时速度相差很大，而MySQL的差别却小很多(稳定)。
指定主键会在插入时要对索引值进行处理，并查找数据库中是否存在相同的键值，这会减慢插入的速率。






130 6198 7039

MongoDB:
    1.MongoDB支持二维空间索引，比如管道，因此可以快速及精确的从指定位置获取数据。
    2.MongoDB在启动后会将数据库中的数据以文件映射的方式加载到内存中。如果内存资源相当丰富的话，这将极大地提高数据库的查询速度，毕竟内存的I/O效率比磁盘高多了
    3.MongoDB适合那些对数据库具体数据格式不明确或者数据库数据格式经常变化的需求模型，而且对开发者十分友好。
    4.MongoDB官方就自带一个分布式文件系统，可以很方便地部署到服务器机群上。MongoDB里有一个Shard的概念，就是方便为了服务器分片使用的。每增加一台Shard，MongoDB的插入性能也会以接近倍数的方式增长，磁盘容量也很可以很方便地扩充。
    5.自带对map-reduce运算框架的支持，这也很方便进行数据的统计。


缺陷:
    1. 事务关系支持薄弱。这也是所有NoSQL数据库共同的缺陷，不过NoSQL并不是为了事务关系而设计的，具体应用还是很需求。
    2. 稳定性有些欠缺，这点从上面的测试便可以看出。
    3. MongoDB一方面在方便开发者的同时，另一方面对运维人员却提出了相当多的要求。业界并没有成熟的MongoDB运维经验，MongoDB中数据的存放格式也很随意，等等问题都对运维人员的考验。


更高的写负载

默认情况下，对比事务安全，MongoDB更关注高的插入速度。如果你需要加载大量低价值的业务数据，比如日志收集，那么MongoDB将很适合你的用例，但是必须避免在要求高事务安全的情景下使用MongoDB，比如一个1000万美元的交易。



处理很大的规模的单表：

数据库扩展是非常有挑战性的，当单表格大小达到5-10GB时，MySQL表格性能会毫无疑问的降低。如果你需要分片并且分割你的数据库，MongoDB将很容易实现这一点。



不可靠环境保证高可用性

设置副本集（主-从服务器设置）不仅方便而且很快，此外，使用MongoDB还可以快速、安全及自动化的实现节点（或数据中心）故障转移。

使用基于位置的数据查询，查的更快

MongoDB支持二维空间索引，比如管道，因此可以快速及精确的从指定位置获取数据。

MongoDB在启动后会将数据库中的数据以文件映射的方式加载到内存中。如果内存资源相当丰富的话，这将极大地提高数据库的查询速度，毕竟内存的I/O效率比磁盘高多了



非结构化数据的爆发增长

增加列在有些情况下可能锁定整个数据库，或者增加负载从而导致性能下降，这个问题通常发生在表格大于1GB的情况下。鉴于MongoDB的弱数据结构模式，添加1个新字段不会对旧表格有任何影响，整个过程会非常快速；因此，在应用程序发生改变时，你不需要专门的1个DBA去修改数据库模式。



缺少专业的数据库管理员

如果你没有专业的DBA，同时你也不需要结构化你的数据及做join查询，MongoDB将会是你的首选。MongoDB非常适合类的持久化，类可以被序列化成JSON并储存在MongoDB。需要注意的是，如果期望获得一个更大的规模，你必须要了解一些最佳实践来避免走入误区。

















MySQL:
















