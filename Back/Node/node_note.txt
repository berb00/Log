Node遵从标准:commonJS模块加载机制       JS遵从标准:ECMAScript 5/6
Node:
    回调
    异步
    非阻塞I/O
    单进程 单线程
    高并发：通过异步、回调函数实现
    事件驱动，
    轻量、可伸缩，适于实时数据交互应用
    JS运行环境
    V8引擎
    都是构建在HTTP协议之上的Web应用。适合高并发，IO密集操作
    使用场景:高并发操作(聊天系统,双11活动)

commondJS模块标准:
    1.节约内存空间
    2.提高代码复用性
    3.解决变量名冲突：保证不同模块可以使用相同的变量名(JS不行)
    模块原理:闭包加载。JS是一种函数式编程语言，它支持闭包。如果我们把一段JavaScript代码用一个函数包装起来，这段代码的所有“全局”变量就变成了函数内部的局部变量。



Node特性解释:

1.回调：异步编程基本方法之一，当需要执行异步程序时候 ，一般采用后续传递，后续函数写入参数，逐层嵌套，使程序按期望方式走完流程
2.异步：每一个任务有一个或多个回调函数（callback），前一个任务结束后，不是执行后一个任务，而是执行回调函数，
        后一个任务则是不等前一个任务结束就执行，所以程序的执行顺序与任务的排列顺序是不一致的、异步的。
        js实现异步的方法：回调函数、事件监听、发布/订阅、Promises对象 ，有兴趣可以去阮一峰http://www.ruanyifeng.com/blog/2012/12/asynchronous%EF%BC%BFjavascript.html一看。
  同步：后一个任务等待前一个任务结束，然后再执行，程序的执行顺序与任务的排列顺序是一致的、同步的。
3.I.O：磁盘文件系统或者数据库的写入和读出。
4.单线程：所谓"单线程"，就是指一次只能完成一件任务。如果有多个任务，就必须排队，前面一个任务完成，再执行后面一个任务，以此类推。比如js的执行。
  多线程：多线程指一次可以执行多个任务，js的异步，非阻塞就是基于浏览器的多线程。
5.事件： 事件是可以被 JavaScript 侦测到的行为。
6.事件驱动：只有当事件发生时候才会调用回调函数，这种函数执行的方式叫做事件驱动。
7.基于事件驱动的回调：通过这种方式实现的回调叫做基于事件驱动的回调。如果和io有关就可以叫做基于异步回调的io。
8.事件循环：Event loop有大量的异步操作完成时需要调用相应回调函数，需要一种机制来管理执行先后，这种机制就叫做事件循环。为一个回调函数队列，node.js不断查询队列中是否有事件，查询到事件，调用相应javascript函数，机制为先进先出任务队列。


relp:交互式操作




概述：NodeJS宣称其目标是“旨在提供一种简单的构建可伸缩网络程序的方法”，那么它的出现是为了解决什么问题呢，它有什么优缺点以及它适用于什么场景呢？

本文就个人使用经验对这些问题进行探讨。

一. NodeJS的特点

我们先来看看NodeJS官网上的介绍：

    Node.js is a platform built on Chrome’s JavaScript runtime for easily building fast, scalable network applications. Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient, perfect for data-intensive real-time applications that run across distributed devices.

其特点为：
1. 它是一个Javascript运行环境

2. 依赖于Chrome V8引擎进行代码解释

3. 事件驱动

4. 非阻塞I/O

5. 轻量、可伸缩，适于实时数据交互应用

6. 单进程，单线程

二. NodeJS带来的对系统瓶颈的解决方案

它的出现确实能为我们解决现实当中系统瓶颈提供了新的思路和方案，下面我们看看它能解决什么问题。

1. 并发连接
    1.系统线程模型：
        单线程，并发请求（用户）到达只能处理一个，其余的要先等待，这就是阻塞，正在享受服务的请求阻塞后面的请求了。
    2.多线程、线程池模型：
        多线程  它调节服务端线程的数量来提高对并发请求的接收和响应，但并发量高的时候，请求仍然需要等待，它有个更严重的问题。
        客户端请求与服务端通讯的过程：服务端与客户端每建立一个连接，都要为这个连接分配一套配套的资源，主要体现为系统内存资源，以PHP为例，维护一个连接可能需要20M的内存。这就是为什么一般并发量一大，就需要多开服务器。

那么NodeJS是怎么解决这个问题的呢？我们来看另外一个模型，想象一下我们在快餐店点餐吃饭的场景。

    3.异步、事件驱动模型
        我们同样是要发起请求，等待服务器端响应；点完餐后拿到一个号码，在位置上等待，而在我们后面的请求会继续得到处理，同样是拿了一个号码然后到一旁等待，接待员能一直进行处理。
        等到饭菜做号了，会喊号码，我们拿到了自己的饭菜，进行后续的处理（吃饭）。这个喊号码的动作在NodeJS中叫做回调（Callback），能在事件（烧菜，I/O）处理完成后继续执行后面的逻辑（吃饭），
        这体现了NodeJS的显著特点，异步机制、事件驱动整个过程没有阻塞新用户的连接（点餐），也不需要维护已经点餐的用户与厨师的连接。

        基于这样的机制，理论上陆续有用户请求连接，NodeJS都可以进行响应，因此NodeJS能支持比Java、PHP程序更高的并发量
        虽然维护事件队列也需要成本，再由于NodeJS是单线程，事件队列越长，得到响应的时间就越长，并发量上去还是会力不从心。
NodeJS解决并发连接的方法：更改连接到服务器的方式，每个连接发射（emit）一个在NodeJS引擎进程中运行的事件（Event），放进事件队列当中，而不是为每个连接生成一个新的OS线程（并为其分配一些配套内存）。

2. I/O阻塞
NodeJS解决的另外一个问题是I/O阻塞，看看这样的业务场景：需要从多个数据源拉取数据，然后进行处理。
    1.串行获取数据，这是我们一般的解决方案，以PHP为例I/O阻塞-PHP为例,假如获取profile和timeline操作各需要1S，那么串行获取就需要2S。
    2.NodeJS非阻塞I/O，发射/监听事件来控制执行过程
非I/O阻塞-PHP为例
    NodeJS遇到I/O事件会创建一个线程去执行，然后主线程会继续往下执行的，因此，拿profile的动作触发一个I/O事件，马上就会执行拿timeline的动作，两个动作并行执行，假如各需要1S，那么总的时间也就是1S。它们的I/O操作执行完成后，发射一个事件，profile和timeline，事件代理接收后继续往下执行后面的逻辑，这就是NodeJS非阻塞I/O的特点。
    总结一下：Java、PHP也有办法实现并行请求（子线程），但NodeJS通过回调函数（Callback）和异步机制会做得很自然。

三. NodeJS的优缺点
    优点:
        1. 高并发（最重要的优点）
        2. 适合I/O密集型应用
    缺点：
        1.不适合CPU密集型应用；CPU密集型应用给Node带来的挑战主要是：由于JavaScript单线程的原因，如果有长时间运行的计算（比如大循环），将会导致CPU时间片不能释放，使得后续I/O无法发起；
            解决方案：分解大型运算任务为多个小任务，使得运算能够适时释放，不阻塞I/O调用的发起；
        2.只支持单核CPU，不能充分利用CPU
        3.可靠性低，一旦代码某个环节崩溃，整个系统都崩溃
            原因：单进程，单线程
            解决方案:1.Nnigx反向代理，负载均衡，开多个进程，绑定多个端口；
                    2.开多个进程监听同一个端口，使用cluster模块；
        4. 开源组件库质量参差不齐，更新快，向下不兼容
        5. Debug不方便，错误没有stack trace

四. 适合NodeJS的场景
    1. RESTful API
        这是NodeJS最理想的应用场景，可以处理数万条连接，本身没有太多的逻辑，只需要请求API，组织数据进行返回即可。它本质上只是从某个数据库中查找一些值并将它们组成一个响应。由于响应是少量文本，入站请求也是少量的文本，因此流量不高，一台机器甚至也可以处理最繁忙的公司的API需求。
    2. 统一Web应用的UI层
        目前MVC的架构，在某种意义上来说，Web开发有两个UI层，一个是在浏览器里面我们最终看到的，另一个在server端，负责生成和拼接页面。
        不讨论这种架构是好是坏，但是有另外一种实践，面向服务的架构，更好的做前后端的依赖分离。如果所有的关键业务逻辑都封装成REST调用，就意味着在上层只需要考虑如何用这些REST接口构建具体的应用。那些后端程序员们根本不操心具体数据是如何从一个页面传递到另一个页面的，他们也不用管用户数据更新是通过Ajax异步获取的还是通过刷新页面。
    3. 大量Ajax请求的应用
        例如个性化应用，每个用户看到的页面都不一样，缓存失效，需要在页面加载的时候发起Ajax请求，NodeJS能响应大量的并发请求。　　总而言之，NodeJS适合运用在高并发、I/O密集、少量业务逻辑的场景。




package.json:一个项目所使用的所有模板包列表，项目基础配置及项目简单介绍              建立package:进入文件夹 npm init
    作用:    1.提供项目基本信息
            2.简化命令行操作
            3.一旦项目模块文件丢失 可据此重新安装   (npm install --save)
dependencies:项目的生产环节中所需的模块(依赖)      (npm install express --save)
devDependencies:项目开发环境时所需的模块          (npm install pug --save-dev)
生产环境(product):公司上线项目
开发环境(development):开发的项目(pug、less、gulp、webpack)


express-generator生成项目框架:
1.安装express:
2.express projectname --view=pug    //使用pug模板
3.sudo cnpm install //根据package.json安装模块




mongodb





























