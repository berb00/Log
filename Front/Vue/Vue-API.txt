==========================================================================================
全局配置Vue.config 9
    Vue.config.silent                           取消/开启 Vue 所有的日志与警告
    Vue.config.optionMergeStrategies            自定义合并策略的选项。
    Vue.config.devtools                         配置是否允许 vue-devtools 检查代码
    Vue.config.errorHandler                     指定组件的渲染和观察期间未捕获错误的处理函数。这个处理函数被调用时，可获取错误信息和 Vue 实例。
    Vue.config.warnHandler                      为 Vue 的运行时警告赋予一个自定义处理函数。注意这只会在开发者环境下生效，
    Vue.config.ignoredElements
    Vue.config.keyCodes                         给 v-on 自定义键位别名
    Vue.config.performance                      设置为 true 以在浏览器开发工具的性能/时间线面板中启用对组件初始化、编译、渲染和打补丁的性能追踪。
    Vue.config.productionTip                    设置为 false 以阻止 vue 在启动时生成生产提示


==========================================================================================
全局 API 11
    Vue.extend(options)                         使用基础 Vue 构造器，创建一个“子类”。参数是一个包含组件选项的对象。
    Vue.nextTick([callback, context])           在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。
    Vue.set(target, key, value)                 向响应式对象中添加一个属性，并确保这个新属性同样是响应式的，且触发视图更新。
    Vue.delete( target, key )                   删除对象的属性。如果对象是响应式的，确保删除能触发更新视图。
    Vue.directive( id, [definition] )           注册或获取全局指令。
    Vue.filter( id, [definition] )              注册或获取全局过滤器。
    Vue.component( id, [definition] )           注册或获取全局组件。注册还会自动使用给定的id设置组件的名称
    Vue.use( plugin )                           安装 Vue.js 插件。如果插件是一个对象，必须提供 install 方法。如果插件是一个函数，它会被作为 install 方法。install 方法调用时，会将 Vue 作为参数传入。
    Vue.mixin(mixin)                            全局注册一个混入，影响注册之后所有创建的每个 Vue 实例
    Vue.compile(template)                       在 render 函数中编译模板字符串。只在独立构建时有效
    Vue.version                                 提供字符串形式的 Vue 安装版本号。


==========================================================================================
选项 / 数据6
    data
    props                                       props 可以是数组或对象，用于接收来自父组件的数据。
    propsData                                   创建实例时传递 props。主要作用是方便测试。
    computed                                    计算属性将被混入到 Vue 实例中。
    methods                                     methods 将被混入到 Vue 实例中。
    watch                                       { [key: string]: string | Function | Object | Array }
选项 / DOM4
    el                                          selector | HTMLElement    提供一个在页面上已存在的 DOM 元素作为 Vue 实例的挂载目标。
    template                                    模板将会 替换 挂载的元素。挂载元素的内容都将被忽略，除非模板的内容有分发插槽。
    render                                      字符串模板的代替方案，允许你发挥 JavaScript 最大的编程能力。该渲染函数接收一个 createElement 方法作为第一个参数用来创建 VNode。
                                                Vue 选项中的 render 函数若存在，则 Vue 构造函数不会从 template 选项或通过 el 选项指定的挂载元素中提取出的 HTML 模板编译渲染函数。
                                                理解createElement
                                                Vue通过建立一个虚拟DOM对真实的DOM发生变化保存追踪，如下代码：
                                                return createElement('h1', this.title);
                                                createElement返回的是包含的信息会告诉VUE页面上需要渲染什么样的节点及其子节点。我们称这样的节点为虚拟DOM，可以简写为VNode，


    renderError                                 当 render 函数遭遇错误时，提供另外一种渲染输出。(仅开发环境)
选项 / 资源3
    directives                                  自定义指令。object    包含 Vue 实例可用指令的哈希表。
    filters                                     过滤器。object        包含 Vue 实例可用过滤器的哈希表。
    components                                  组件。object          包含 Vue 实例可用组件的哈希表。
选项 / 生命周期钩子11
    beforeCreate                                在实例初始化之后，数据观测 (data observer) 和 event/watcher 事件配置之前被调用
    created                                     在实例创建完成后被立即调用。在这一步，实例已完成以下的配置：数据观测 (data observer)，属性和方法的运算，watch/event 事件回调。然而，挂载阶段还没开始，$el 属性目前不可见。
    beforeMount                                 在挂载开始之前被调用：相关的 render 函数首次被调用。该钩子在服务器端渲染期间不被调用。
    mounted                                     el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子。
    beforeUpdate                                数据更新时调用，发生在虚拟 DOM 打补丁之前。该钩子在服务器端渲染期间不被调用，因为只有初次渲染会在服务端进行
    updated

    beforeDestroy                               实例销毁之前调用。在这一步，实例仍然完全可用。该钩子在服务器端渲染期间不被调用。
    destroyed                                   Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。该钩子在服务器端渲染期间不被调用。

    activated                                   keep-alive 组件激活时调用。该钩子在服务器端渲染期间不被调用。
    deactivated                                 keep-alive 组件停用时调用。该钩子在服务器端渲染期间不被调用。

    errorCaptured                               当捕获一个来自子孙组件的错误时被调用。
选项 / 组合4
    parent                                      指定已创建的实例之父实例，在两者之间建立父子关系。子实例可以用 this.$parent 访问父实例，子实例被推入父实例的 $children 数组中。
    mixins                                      mixins 选项接受一个混入对象的数组。
    extends                                     允许声明扩展另一个组件(可以是一个简单的选项对象或构造函数)，而无需使用 Vue.extend。这主要是为了便于扩展单文件组件。
    provide / inject
选项 / 其它6
    name                                        允许组件模板递归地调用自身。
    delimiters                                  改变纯文本插入分隔符。
    functional                                  使组件无状态 (没有 data ) 和无实例 (没有 this 上下文)。他们用一个简单的 render 函数返回虚拟节点使他们更容易渲染。
    model                                       允许一个自定义组件在使用 v-model 时定制 prop 和 event。
    inheritAttrs
    comments                                    当设为 true 时，将会保留且渲染模板中的 HTML 注释。默认行为是舍弃它们。

==========================================================================================
实例属性13
    vm.$data                                    Vue 实例观察的数据对象。Vue 实例代理了对其 data 对象属性的访问。
    vm.$props                                   当前组件接收到的 props 对象。Vue 实例代理了对其 props 对象属性的访问。
    vm.$el                                      Vue 实例使用的根 DOM 元素。
    vm.$options                                 用于当前 Vue 实例的初始化选项。需要在选项中包含自定义属性时会有用处：
    vm.$parent                                  父实例，如果当前实例有的话。
    vm.$root                                    当前组件树的根 Vue 实例。如果当前实例没有父实例，此实例将会是其自己。
    vm.$children                                当前实例的直接子组件。需要注意 $children 并不保证顺序，也不是响应式的
    vm.$slots                                   用来访问被插槽分发的内容。每个具名插槽 有其相应的属性 (例如：slot="foo" 中的内容将会在 vm.$slots.foo 中被找到)。
    vm.$scopedSlots                             用来访问作用域插槽。对于包括 默认 slot 在内的每一个插槽，该对象都包含一个返回相应 VNode 的函数。
    vm.$refs                                    一个对象，持有注册过 ref 特性 的所有 DOM 元素和组件实例。
    vm.$isServer                                当前 Vue 实例是否运行于服务器。
    vm.$attrs                                   包含了父作用域中不作为 prop 被识别 (且获取) 的特性绑定 (class 和 style 除外)。
    vm.$listeners                               包含了父作用域中的 (不含 .native 修饰器的) v-on 事件监听器。
实例方法 / 数据3
    vm.$watch                                   观察 Vue 实例变化的一个表达式或计算属性函数。
    vm.$set                                     这是全局 Vue.set 的别名。
    vm.$delete                                  这是全局 Vue.delete 的别名。
实例方法 / 事件4
    vm.$on                                      监听当前实例上的自定义事件。事件可以由vm.$emit触发。回调函数会接收所有传入事件触发函数的额外参数。
    vm.$once                                    监听一个自定义事件，但是只触发一次，在第一次触发之后移除监听器。
    vm.$off([event, callback])                  移除自定义事件监听器。
    vm.$emit(event, […args])                    触发当前实例上的事件。附加参数都会传给监听器回调。
实例方法 / 生命周期4
    vm.$mount([elementOrSelector])              手动地挂载一个未挂载的实例(Vue 实例在实例化时没有收到 el 选项)
    vm.$forceUpdate                             迫使 Vue 实例重新渲染。注意它仅仅影响实例本身和插入插槽内容的子组件，而不是所有子组件。
    vm.$nextTick                                将回调延迟到下次 DOM 更新循环之后执行。在修改数据之后立即使用它，然后等待 DOM 更新。它跟全局方法 Vue.nextTick 一样，不同的是回调的 this 自动绑定到调用它的实例上。
    vm.$destroy                                 完全销毁一个实例。清理它与其它实例的连接，解绑它的全部指令及事件监听器。触发 beforeDestroy 和 destroyed 的钩子。

==========================================================================================
指令13
    v-text                      更新元素的 textContent。
    v-html                      更新元素的 innerHTML 。
    v-show                      根据表达式之真假值，切换元素的 display CSS 属性。
    v-if
    v-else
    v-else-if
    v-for

    v-on       @                绑定事件监听器。
    v-once                      只渲染元素和组件一次。随后的重新渲染，元素/组件及其所有的子节点将被视为静态内容并跳过

    v-bind     :                动态地绑定一个或多个特性，或一个组件 prop 到表达式。
    v-model                     在表单控件或者组件上创建双向绑定

    v-cloak                     保持在元素上直到关联实例结束编译
    v-pre                       跳过这个元素和它的子元素的编译过程。
    v-pre

==========================================================================================
特殊特性6
    key                         主要用在 Vue 的虚拟 DOM 算法，在新旧 nodes 对比时辨识 VNodes。
    ref                         给元素或子组件注册引用信息。引用信息将会注册在父组件的 $refs 对象上。
    slot                        用于标记往哪个具名插槽中插入子组件内容。
    slot-scope                  用于将元素或组件表示为作用域插槽。
    scope                       除了 scope 只可以用于 <template> 元素，其它和 slot-scope 都相同。
    is                          用于动态组件且基于 DOM 内模板的限制来工作。

==========================================================================================
内置的组件5
    component                   渲染一个“元组件”为动态组件。依 is 的值，来决定哪个组件被渲染。
    transition                  <transition> 元素作为单个元素/组件的过渡效果。<transition> 只会把过渡效果应用到其包裹的内容上，而不会额外渲染 DOM 元素，也不会出现在检测过的组件层级中。
    transition-group            <transition-group> 元素作为多个元素/组件的过渡效果。<transition-group> 渲染一个真实的 DOM 元素。默认渲染 <span>，可以通过 tag 属性配置哪个元素应该被渲染。
    keep-alive                  <keep-alive> 包裹动态组件时，会缓存不活动的组件实例，而不是销毁它们。
    slot                        <slot> 元素作为组件模板之中的内容分发插槽。<slot> 元素自身将被替换。


VNode 接口
服务端渲染