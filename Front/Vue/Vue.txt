#目录
    基础
    安装
    介绍
    Vue 实例
    模板语法
    计算属性和侦听器
    Class 与 Style 绑定
    条件渲染
    列表渲染
    事件处理
    表单输入绑定
    组件基础

    ================================================================================================
    深入了解组件
    组件注册
    Prop
    自定义事件
    插槽
    动态组件 & 异步组件
    处理边界情况

    ================================================================================================
    过渡 & 动画
    进入/离开 & 列表过渡
    状态过渡

    ================================================================================================
    可复用性 & 组合
    混入
    自定义指令
    渲染函数 & JSX
    插件
    过滤器

    ================================================================================================
    工具
    生产环境部署
    单文件组件
    单元测试
    TypeScript 支持

    ================================================================================================
    规模化
    路由
    状态管理
    服务端渲染

    ================================================================================================
    内在
    深入响应式原理
        如何追踪变化
        检测变化的注意事项
        声明响应式属性
        异步更新队列


#数据绑定
    基于DOM实现模板(不是基于字符串实现模板)
    "Mustache" 语法:
        {{ msg }}           //text
        {{{ raw_html }}}    //html


#计算属性和侦听器
    computed
    watch
    $watch


#Class 与 Style 绑定
    vbind=style|class
    1:vbind动态绑定指令，默认情况下标签自带属性的值是固定的，在为了能够动态的给这些属性添加值，可以使用vbind:你要动态变化的值="表达式"
    2:vbind用于绑定属性和数据 ，其缩写为“ : ” 也就是vbind:id === :id
    3:vmodel用在表单控件上的，用于实现双向数据绑定，所以如果你用在除了表单控件以外的标签是没有任何效果的。


#模板语法


#条件渲染
    vif="bool"
    velseif="bool"
    velse
    vshow="bool"           //改变display属性值
    <h1 vif="ok">Yes</h1>


#列表渲染
    vfor="val in iterator"                 //vfor 具有比 vif 更高的优先级。
    vfor="(val,key) in iterator"
    vfor="(val,key,index) in iterator"
    vfor="n in int"    //迭代整数

    <div vfor="(value, key, index) in object">
    {{ index }}. {{ key }}: {{ value }}
    </div>


#事件处理von、@
    von:事件名=方法名|表达式
    <a von:click.stop="doThis"></a>
    <a @click.stop="doThis"></a>
    事件修饰符
        .stop           阻止单击事件冒泡
        .prevent        提交事件不再重载页面 只有修饰符
        .capture        添加事件侦听器时使用事件捕获模式
        .self           只当事件在该元素本身（而不是子元素）触发时触发回调
        .once           事件只能触发一次


#事件:
    click
    submit
    keyup.keyCode|keyname       //按键


#表单输入绑定
    vmodel创建双向数据绑定
    .lazy           //在change事件中同步
    .number         //将输入值转为 Number 类型
    .trim           //过滤输入值的首尾空格


#组件基础
    组件是可复用的 Vue 实例(除了el这种根实例特有选项 具有与Vue实例相同的options)


#深入了解组件
    组件注册
    Prop                父>子
    自定义事件           子>父  兄弟组件
    插槽
    动态组件 & 异步组件
    处理边界情况


#过渡 & 动画
    进入/离开 & 列表过渡
    状态过渡


#可复用性 & 组合
    混入
    自定义指令
    渲染函数 & JSX
    插件
    过滤器


#工具
    生产环境部署
    单文件组件
    单元测试
    TypeScript 支持


#规模化
    路由
    状态管理
    服务端渲染


#内在


#深入响应式原理


#组件通信


#创建Vue项目过程
    安装脚手架:
        npm install g @vue/cli 
        yarn global add @vue/cli
    创建:
        vue create projectname
    检查项目所需的特性：
        选则manually/default是默认创建(babel,eslint)
        选择Babel CSS

    选择CSS预处理器:
        SCSS/SASS
        ❯LESS
        Stylus

    你喜欢在哪里配置Babel、PostCSS、ESLint等
        ❯In dedicated config files(专用配置文件)
        In package.json

    是否将此项目设为预置(下次可直接使用该项目创建)

    运行
        npm run serve

    在vue中调用 animate.css:
        放在src/assets文件夹(assets存放静态文件)  使用index.html引用无效  在本文件使用import导入(或less导入)

    在vue中调用jq:
        在根目录下sudo cnpm i jquery D
        在main.js下 import $ from "jquery"
    安装vuex:
        sudo cnpm install vuex save


Vue全家桶：
    Vue核心
    Vuerouter
    Vuex



















