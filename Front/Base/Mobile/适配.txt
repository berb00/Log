

在dpr不同的屏幕上，css像素所呈现的大小是一致的。
不同的是，1个css像素对应（覆盖）的物理像素个数。----------- 模糊的产生
    dpr=1的屏幕    1个css像素对应（覆盖）的1个物理像素。
    dpr=2的屏幕    1个css像素对应（覆盖）的4个物理像素。

模糊的本质是因为dpr
=======================================
dpr = 2 : 1
   PC          device      css
   4             4          1
100*100       100*100      50*50        正常2:1
100*100       100*100      100*100      偏淡1:1
100*100       100*100      25*25        偏浓4:1
=======================================

位图像素是栅格图像（如：png,jpg,gif等）最小的数据单元。每一个位图像素都包含着一些自身的显示信息。（如：显示位置，颜色值，透明度等）

理论上来说，1个位图像素对应1个物理像素，图片才能达到完美清晰的展示。
以iphone6为例，1个位图像素对应4个物理像素。
由于单个位图像素已经是最小的数据单位了，它不能再被进行切割。
于是为了能够显示出来，就只能就近取色，位图像素不够分从而导致所谓的图片模糊问题
解决方法:
    使用跟dpr同个倍数大小的图片。比如iphone6，一个200x300的img标签，原图就要提供400x600的大小。
    那么当加载到img标签中，浏览器会自动对每1px的css像素减半，可以理解为此时还是维持着1:1的css像素:物理像素，不产生模糊。
    css像素:物理像素
       1  :   4

响应式针对的是不同分辨率设备而进行的适配式设计，以利用@media规则为主要手段，
自适应则忽略@media以比例布局为主，目的是适应不同的浏览器窗口大小。



于是我们会发现，现今大型网站，例如说淘宝网，已经没有做响应式了。什么意思呢？
我们会发现，淘宝网手机端和网页端使用的是两个域名，也就是说，不同的客户端已经不再共用一套dom结构了。
而是区分开来做自适应。然后每次用户访问的时候它就根据客户端的类型重定向。

为什么呢？

试想一下淘宝这种大型网站，一个分页下的商品条目特别多，并且每个商品条目的dom结构又十分复杂，而且pc端往往显示的信息是要比手机端更多的。
如果不分开做两套，而是直接用响应式的话，那么pc端上显示的很多dom就要在手机端上隐藏，结果这些dom都没有被用到，但是却加载了。
在这个流量和速度至上的时代，代码冗余先不说，多加载的这些无用的代码而消耗的流量，从某种意义上来说就已经损失了很多的效益。


















