================================================================
let 和 const 命令
================================================================
变量的解构赋值
================================================================

字符串的扩展
================================================================
正则的扩展
================================================================
数值的扩展
================================================================
函数的扩展
----------------------------------------------------------------
    1.函数参数的默认值
----------------------------------------------------------------
    2.rest 参数
----------------------------------------------------------------
    3.严格模式
----------------------------------------------------------------
    4.name 属性
----------------------------------------------------------------
    5.箭头函数
        1.this指向定义时所在的对象，而不是使用时所在的对象。this指向固定不可变
        2.不能使用new
        3.不能使用arguments
        4.不能使用yield
----------------------------------------------------------------
    6.双冒号运算符
----------------------------------------------------------------
    7.尾调用优化
----------------------------------------------------------------
    8.函数参数的尾逗号


================================================================
数组的扩展
================================================================
对象的扩展
================================================================
Symbol
================================================================
Set 和 Map 数据结构
================================================================
Proxy
================================================================
Reflect
================================================================
Promise 对象
    Promise.prototype.then()
----------------------------------------------------------------
    Promise.prototype.catch()
----------------------------------------------------------------
    Promise.prototype.finally()
----------------------------------------------------------------
    Promise.all()
----------------------------------------------------------------
    Promise.race()
----------------------------------------------------------------
    Promise.resolve()
----------------------------------------------------------------
    Promise.reject()
----------------------------------------------------------------
    应用
----------------------------------------------------------------
    Promise.try()

    Promise 构造函数是同步执行的，promise.then 中的函数是异步执行的。
    promise 可以链式调用。提起链式调用我们通常会想到通过 return this 实现，不过 Promise 并不是这样实现的。promise 每次调用 .then 或者 .catch 都会返回一个新的 promise，从而实现了链式调用。
    构造函数中的 resolve 或 reject 只有第一次执行有效，多次调用没有任何作用，(无论多少个resolve()或reject()都只有一个执行)

    return new Error()//return error对象不会抛出错误 return Promise.reject(new Error('error!!!'))、throw new Error('error!!!')
    返回任意一个非 promise 的值都会被包裹成 promise 对象，即 return new Error(‘error!!!’) 等价于 return Promise.resolve(new Error(‘error!!!’))。

    .then 或者 .catch 的参数期望是函数，传入非函数则会发生值穿透。
    .then 的第二个处理错误的函数捕获不了第一个处理成功的函数抛出的错误，而后续的 .catch 可以捕获之前的错误。

    .then 或 .catch 返回的值不能是 promise 本身，否则会造成死循环



================================================================
Iterator 和 for...of 循环
================================================================
Generator 函数的语法
================================================================

Generator 函数的异步应用
================================================================
async 函数
================================================================
Class 的基本语法
================================================================
Class 的继承
================================================================
Decorator
================================================================
Module 的语法
================================================================
Module 的加载实现





