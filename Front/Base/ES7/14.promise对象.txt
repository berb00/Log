promise对象:
是一个构造函数 用来生成promise实例

异步编程解决方案 比传统的解决方案——回调函数和事件——更合理和更强大。

保存未来才会结束的事件的容器

可以将异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数

Promise 内部的错误不会影响到 Promise 外部的代码



三种状态:
pending--->fulfilled
pending--->rejected
    只有异步操作的结果，可以决定当前是哪一种状态
    一旦状态改变，就不会再变resolved（已定型）

promise:如果改变已经发生了，你再对Promise对象添加回调函数，也会立即得到这个结果。
事件(Event):如果你错过了它，再去监听，是得不到结果的。

const promise = new Promise(function(resolve, reject) {
  // ... some code
  if (/* 异步操作成功 */){
    resolve(value);
  } else {
    reject(error);
  }
});



缺点:
一、无法取消Promise，一旦新建它就会立即执行，无法中途取消。
二、如果不设置回调函数，Promise内部抛出的错误，不会反应到外部。
三、当处于pending状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。

db.student.find({
                    {$or:[{age:20},{age:23}]},
                    {height:{$gt:170}}
                });


执行顺序:
1.实例化promise立即执行    promise实例化内部函数:resolve()、reject()在本轮事件循环的末尾执行
2.所有同步代码执行
3.then()执行



Promise.prototype.then()                    //返回一个Promise新实例        指定下一步流程
Promise.prototype.catch()                   //返回一个Promise新实例           .then(null, reject)的别名   处理跑出的错误
Promise.prototype.finally()                 //不管 Promise 对象最后状态如何，都会执行的操作
                                            //应该是与状态无关的，不依赖于 Promise 的执行结果。
                                            //finally本质上是then方法的特例
Promise.all([p1,p2...])                     //将多个 Promise 实例，包装成一个新的 Promise 实例 多个实例综合处理
Promise.race([p1,p2...])                    //将多个 Promise 实例，包装成一个新的 Promise 实例 多个里面挑一个先改变状态的
Promise.resolve()                           //将现有对象转为 Promise 对象
Promise.reject(reason)                      //返回一个新的 Promise 实例，该实例的状态为rejected。
Promise.try()

应用
    加载图片
    generator函数与Promise结合













































